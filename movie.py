# -*- coding: utf-8 -*-
"""movie1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lGRJ6vM6udoM-38_FagUQVFPTqDEmcah
"""

import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
import streamlit as st

#----------------------------------------
# 1. Data Loading & Preprocessing
#----------------------------------------
@st.cache_data(show_spinner=False)
def load_data():
    # Load ratings
    ratings_url = "http://files.grouplens.org/datasets/movielens/ml-100k/u.data"
    ratings = pd.read_csv(ratings_url, sep='\t', names=['user', 'movie', 'rating', 'timestamp'], encoding='latin-1')

    # Load movie info
    movies_url = "http://files.grouplens.org/datasets/movielens/ml-100k/u.item"
    movies = pd.read_csv(
        movies_url,
        sep='|',
        names=[
            'movie', 'title', 'release_date', 'video_release_date', 'IMDb_URL',
            'unknown', 'Action', 'Adventure', 'Animation', 'Children', 'Comedy',
            'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir', 'Horror',
            'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western'
        ],
        encoding='latin-1'
    )

    # Create user‚Äìitem matrix
    rating_matrix = ratings.pivot(index='user', columns='movie', values='rating').fillna(0)

    # User similarity matrix
    similarity_df = pd.DataFrame(
        cosine_similarity(rating_matrix),
        index=rating_matrix.index,
        columns=rating_matrix.index
    )

    # üéØ Movie similarity matrix based on genres
    genre_cols = [
        'Action', 'Adventure', 'Animation', 'Children', 'Comedy', 'Crime', 'Documentary',
        'Drama', 'Fantasy', 'Film-Noir', 'Horror', 'Musical', 'Mystery', 'Romance',
        'Sci-Fi', 'Thriller', 'War', 'Western'
    ]
    genre_vectors = movies[genre_cols]
    movie_sim_df = pd.DataFrame(
        cosine_similarity(genre_vectors),
        index=movies['title'],
        columns=movies['title']
    )

    return rating_matrix, movies, similarity_df, movie_sim_df

#----------------------------------------
# 2. Recommendation Logic
#----------------------------------------
def recommend(user_id: int, rating_matrix: pd.DataFrame,
              similarity_df: pd.DataFrame, movies: pd.DataFrame,
              k: int = 5) -> pd.Series:
    """
    Returns top-k movie recommendations for a given user_id.
    """
    # Get similarity scores for the user
    user_sims = similarity_df[user_id]

    # Weighted sum of ratings by similar users
    weighted_ratings = rating_matrix.mul(user_sims, axis=0).sum(axis=0)
    normalization = user_sims.sum()
    scores = weighted_ratings / normalization

    # Exclude movies the user has already rated
    already_rated = rating_matrix.loc[user_id] > 0
    scores = scores[~already_rated]

    # Get top-k movie IDs
    top_movie_ids = scores.nlargest(k).index

    # Map to movie titles
    return movies.set_index('movie').loc[top_movie_ids]['title']

#----------------------------------------
# 3. Streamlit UI
#----------------------------------------
st.title("üé¨ Movie Recommender System")

st.markdown("Select a user to get personalized movie recommendations based on similar users.")

# Load data
rating_matrix, movies, similarity_df, movie_sim_df = load_data()

# User selection
user_list = rating_matrix.index.tolist()
selected_user = st.selectbox("Choose User ID", user_list, index=0)

# Recommendation button
if st.button("Get Recommendations"):
    with st.spinner("Fetching recommendations..."):
        recs = recommend(
            user_id=selected_user,
            rating_matrix=rating_matrix,
            similarity_df=similarity_df,
            movies=movies,
            k=5
        )
    st.success("Here are your top 5 movie picks:")
    for idx, title in enumerate(recs, start=1):
        st.write(f"{idx}. {title}")

# Show some stats
st.sidebar.header("Dataset Stats")
st.sidebar.write(f"Total users: {rating_matrix.shape[0]}")
st.sidebar.write(f"Total movies: {rating_matrix.shape[1]}")
st.sidebar.write(f"Sparsity: {(rating_matrix==0).mean().mean():.2%}")

#----------------------------------------
# 4. Search for Similar Movies by Genre
#----------------------------------------
st.markdown("---")
st.subheader("üîç Search for Similar Movies")

movie_titles = movies['title'].dropna().unique()
selected_movie = st.selectbox("Choose a Movie", sorted(movie_titles))

if st.button("Find Similar Movies"):
    with st.spinner("Finding similar titles..."):
        similar_movies = movie_sim_df[selected_movie].sort_values(ascending=False)[1:6]
    st.success("Here are 5 movies similar to your selection:")
    for i, title in enumerate(similar_movies.index, start=1):
        st.write(f"{i}. {title}")